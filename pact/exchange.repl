
(begin-tx)
(load "root/fungible-v2.pact")
(load "root/coin.pact")

(env-data
  { 'swap-ns-user: []
  , 'swap-ns-admin: []
  })
(load "ns.pact")
(load "tokens.pact")
(load "exchange.pact")


(define-namespace 'test (sig-keyset) (sig-keyset))
(load "test/ABC.pact")
(commit-tx)

(begin-tx)

;; test pair canonicity
(use swap.exchange)
(expect "canonical pair keys match"
  (get-pair-key test.abc coin)
  (get-pair-key coin test.abc))
(expect "pair does not exist yet" false
  (pair-exists test.abc coin))

(create-pair coin test.abc "")
(env-data {'bob: ["bob"]})
(env-sigs [
  { 'key: "bob"
  , 'caps:
    [(coin.TRANSFER "Bob" (at 'account (get-pair test.abc coin)) 100.0)
     (test.abc.TRANSFER "Bob" (at 'account (get-pair test.abc coin)) 200.0)
    ]
  }])
(test-capability (coin.COINBASE))
(coin.coinbase "Bob" (read-keyset 'bob) 1000.0)
(test.abc.create-account "Bob" (read-keyset 'bob))
(test.abc.fund "Bob" 2000.0)

;; add-liquidity

(add-liquidity coin test.abc
  100.0
  200.0
  50.0
  100.0
  "Bob"
  (read-keyset 'bob)
  (at 'block-time (chain-data)))

(expect "token liquidity for bob"
  141.321356237309
  (swap.tokens.get-balance (get-pair-key coin test.abc) "Bob")
)
(expect "minimum liquidity for pair"
  MINIMUM_LIQUIDITY
  (swap.tokens.get-balance
    (get-pair-key coin test.abc)
    (at 'account (get-pair coin test.abc)))
)
(expect "total supply for pair"
  (+ 141.321356237309 MINIMUM_LIQUIDITY)
  (swap.tokens.total-supply (get-pair-key coin test.abc))
)
(expect "kda debited for bob"
  900.0 (coin.get-balance "Bob"))
(expect "abc debited for bob"
  1800.0 (test.abc.get-balance "Bob"))
(expect "kda credited for pair"
  100.0 (coin.get-balance (at 'account (get-pair coin test.abc))))
(expect "abc credited for pair"
  200.0 (test.abc.get-balance (at 'account (get-pair coin test.abc))))

;; remove-liquidity, flipping tokens to test canonicity
(env-sigs [
  { 'key: "bob"
  , 'caps:
    [(swap.tokens.TRANSFER
      (get-pair-key coin test.abc)
      "Bob"
      (at 'account (get-pair coin test.abc))
      141.321356237309)
    ]}])
;;TODO fix bug, installing here for now
(install-capability (test.abc.TRANSFER (at 'account (get-pair coin test.abc)) "Bob" 200.0))
(install-capability (coin.TRANSFER (at 'account (get-pair coin test.abc)) "Bob" 100.0))
(remove-liquidity test.abc coin
  141.321356237309
  200.0
  100.0
  "Bob"
  (at 'block-time (chain-data)))

(expect "token liquidity for bob"
  0.0
  (swap.tokens.get-balance (get-pair-key coin test.abc) "Bob")
)
(expect "minimum liquidity for pair"
  MINIMUM_LIQUIDITY
  (swap.tokens.get-balance
    (get-pair-key coin test.abc)
    (at 'account (get-pair coin test.abc)))
)
(expect "total supply for pair"
  MINIMUM_LIQUIDITY
  (swap.tokens.total-supply (get-pair-key coin test.abc))
)
(expect "kda credited for bob"
  1000.0 (coin.get-balance "Bob"))
(expect "abc credited for bob"
  2000.0 (test.abc.get-balance "Bob"))
(expect "kda debited for pair"
  0.0 (coin.get-balance (at 'account (get-pair coin test.abc))))
(expect "abc debited for pair"
  0.0 (test.abc.get-balance (at 'account (get-pair coin test.abc))))

(commit-tx)

;; add back liquidity for swap

(begin-tx)
(use swap.exchange)
(env-sigs [
  { 'key: "bob"
  , 'caps:
    [(coin.TRANSFER "Bob" (at 'account (get-pair test.abc coin)) 100.0)
     (test.abc.TRANSFER "Bob" (at 'account (get-pair test.abc coin)) 200.0)
    ]
  }])
(add-liquidity coin test.abc
  100.0
  200.0
  50.0
  100.0
  "Bob"
  (read-keyset 'bob)
  (at 'block-time (chain-data)))

(expect "token liquidity for bob"
  141.421356237309
  (swap.tokens.get-balance (get-pair-key coin test.abc) "Bob")
)
(expect "minimum liquidity for pair"
  MINIMUM_LIQUIDITY
  (swap.tokens.get-balance
    (get-pair-key coin test.abc)
    (at 'account (get-pair coin test.abc)))
)
(expect "total supply for pair"
  (+ 141.421356237309 MINIMUM_LIQUIDITY)
  (swap.tokens.total-supply (get-pair-key coin test.abc))
)
(expect "kda debited for bob"
  900.0 (coin.get-balance "Bob"))
(expect "abc debited for bob"
  1800.0 (test.abc.get-balance "Bob"))
(expect "kda credited for pair"
  100.0 (coin.get-balance (at 'account (get-pair coin test.abc))))
(expect "abc credited for pair"
  200.0 (test.abc.get-balance (at 'account (get-pair coin test.abc))))
