
(begin-tx)
(load "root/fungible-v2.pact")
(load "root/coin.pact")

(env-data
  { 'swap-ns-user: []
  , 'swap-ns-admin: []
  })
(load "ns.pact")
(load "tokens.pact")
(load "swap-callable.pact")
(load "exchange.pact")


(define-namespace 'test (sig-keyset) (sig-keyset))
(load "test/ABC.pact")
(load "test/XYZ.pact")
(commit-tx)

(begin-tx)

;; test pair canonicity
(use swap.exchange)
(expect "canonical pair keys match"
  (get-pair-key test.abc coin)
  (get-pair-key coin test.abc))
(expect "pair does not exist yet" false
  (pair-exists test.abc coin))

(create-pair coin test.abc "")
(create-pair coin test.xyz "")
(expect "create-pair (2) events" ;; TODO reverse
  [ { "name": "swap.exchange.CREATE_PAIR"
    , "params": [ coin test.abc "coin:test.abc"
                  (at 'account (get-pair test.abc coin))]
    , "module-hash": (at 'hash (describe-module "swap.exchange"))
    }
    { "name": "swap.exchange.CREATE_PAIR"
    , "params": [ coin test.xyz "coin:test.xyz"
                  (at 'account (get-pair test.xyz coin))]
    , "module-hash": (at 'hash (describe-module "swap.exchange"))
    }
  ]
  (env-events true))

(env-data
  { 'bob: ["bob"]
  , 'alice: ["alice"]
  })

(test-capability (coin.COINBASE))
(coin.coinbase "Bob" (read-keyset 'bob) 1000.0)
(test.abc.create-account "Bob" (read-keyset 'bob))
(test.abc.fund "Bob" 2000.0)
(test.xyz.create-account "Bob" (read-keyset 'bob))
(test.xyz.fund "Bob" 600.0)
(coin.coinbase "Alice" (read-keyset 'alice) 10000.0)
(test.abc.create-account "Alice" (read-keyset 'alice))
(test.abc.fund "Alice" 20000.0)
(commit-tx)

;;
;; add-liquidity
;;
(begin-tx)
(use swap.exchange)

(env-sigs [
  { 'key: "bob"
  , 'caps:
    [(coin.TRANSFER "Bob" (at 'account (get-pair test.abc coin)) 100.0)
     (test.abc.TRANSFER "Bob" (at 'account (get-pair test.abc coin)) 200.0)
    ]
  }])

(expect "add-liquidity"
  { "liquidity": 141.321356237309
  , "supply": 141.421356237309
  , "amount0": 100.0
  , "amount1": 200.0 }
  (add-liquidity
    coin
    test.abc
    100.0
    200.0
    50.0
    100.0
    "Bob"
    "Bob"
    (read-keyset 'bob)
    (at 'block-time (chain-data))))

(expect "add-liquidity events" ;; TODO reverse
  [ { "name": "coin.TRANSFER"
    , "params": ["Bob" (at 'account (get-pair test.abc coin)) 100.0]
    , "module-hash": (at 'hash (describe-module "coin"))
    }
    { "name": "test.abc.TRANSFER"
    , "params": ["Bob" (at 'account (get-pair test.abc coin)) 200.0]
    , "module-hash": (at 'hash (describe-module "test.abc"))
    }
    { "name": "swap.tokens.MINT"
    , "params": [ (get-pair-key coin test.abc)
                  "lock" 0.1]
    , "module-hash": (at 'hash (describe-module "swap.tokens"))
    }
    { "name": "swap.tokens.MINT"
    , "params": [(get-pair-key coin test.abc) "Bob" 141.321356237309]
    , "module-hash": (at 'hash (describe-module "swap.tokens"))
    }
    { "name": "swap.exchange.UPDATE"
    , "params": [(get-pair-key coin test.abc) 100.0 200.0]
    , "module-hash": (at 'hash (describe-module "swap.exchange"))
    }
  ]
  (env-events true))


(expect "token liquidity for bob"
  141.321356237309
  (swap.tokens.get-balance (get-pair-key coin test.abc) "Bob")
)
(expect "minimum liquidity locked"
  MINIMUM_LIQUIDITY
  (swap.tokens.get-balance
    (get-pair-key coin test.abc)
    "lock")
)
(expect "total supply for pair"
  (+ 141.321356237309 MINIMUM_LIQUIDITY)
  (swap.tokens.total-supply (get-pair-key coin test.abc))
)
(expect "kda debited for bob"
  900.0 (coin.get-balance "Bob"))
(expect "abc debited for bob"
  1800.0 (test.abc.get-balance "Bob"))
(expect "kda credited for pair"
  100.0 (coin.get-balance (at 'account (get-pair coin test.abc))))
(expect "abc credited for pair"
  200.0 (test.abc.get-balance (at 'account (get-pair coin test.abc))))

;;
;; remove-liquidity
;;

;; flip tokens to test canonicity
(env-sigs [
  { 'key: "bob"
  , 'caps:
    [(swap.tokens.TRANSFER
      (get-pair-key coin test.abc)
      "Bob"
      (at 'account (get-pair coin test.abc))
      141.321356237309)
    ]}])

(expect "remove-liquidity"
  { "amount0": 99.929289321881
  , "amount1": 199.85857864376268}
  (remove-liquidity test.abc coin
    141.321356237309
    200.0
    100.0
    "Bob"
    "Bob"
    (read-keyset 'bob)
    (at 'block-time (chain-data))))

(expect "remove-liquidity events" ;; TODO reverse
  [ { "name": "swap.tokens.TRANSFER"
    , "params": [ (get-pair-key coin test.abc) "Bob"
                  (at 'account (get-pair coin test.abc)) 141.321356237309 ]
    , "module-hash": (at 'hash (describe-module "swap.tokens"))
    }
    { "name": "swap.tokens.BURN"
    , "params": [ (get-pair-key coin test.abc)
                  (at 'account (get-pair coin test.abc)) 141.321356237309]
    , "module-hash": (at 'hash (describe-module "swap.tokens"))
    }
    { "name": "coin.TRANSFER"
    , "params": [(at 'account (get-pair coin test.abc)) "Bob" 99.929289321881]
    , "module-hash": (at 'hash (describe-module "coin"))
    }
    { "name": "test.abc.TRANSFER"
    , "params": [(at 'account (get-pair coin test.abc)) "Bob" 199.85857864376268]
    , "module-hash": (at 'hash (describe-module "test.abc"))
    }
    { "name": "swap.exchange.UPDATE"
    , "params": [(get-pair-key coin test.abc) 0.070710678119 0.14142135623732]
    , "module-hash": (at 'hash (describe-module "swap.exchange"))
  } ]
  (env-events true))


(expect "token liquidity for bob"
  0.0
  (swap.tokens.get-balance (get-pair-key coin test.abc) "Bob")
)
(expect "minimum liquidity for pair"
  MINIMUM_LIQUIDITY
  (swap.tokens.get-balance
    (get-pair-key coin test.abc)
    "lock")
)
(expect "total supply for pair"
  MINIMUM_LIQUIDITY
  (swap.tokens.total-supply (get-pair-key coin test.abc))
)
(expect "kda credited for bob"
  999.929289321881 (coin.get-balance "Bob"))
(expect "abc credited for bob"
  1999.85857864376268 (test.abc.get-balance "Bob"))
(expect "kda debited for pair"
  0.070710678119 (coin.get-balance (at 'account (get-pair coin test.abc))))
(expect "abc debited for pair"
  0.14142135623732 (test.abc.get-balance (at 'account (get-pair coin test.abc))))

(rollback-tx)

;;
;; swaps
;;

(begin-tx)
(use swap.exchange)

(module swaptests G
  (defcap G () true)
  (defun setup ()
    (add-liquidity coin test.abc
      100.0
      200.0
      50.0
      100.0
      "Bob"
      "Bob"
      (read-keyset 'bob)
      (at 'block-time (chain-data)))

    (add-liquidity coin test.xyz
      100.0
      60.0
      50.0
      30.0
      "Bob"
      "Bob"
      (read-keyset 'bob)
      (at 'block-time (chain-data)))
  )
)
(commit-tx)
;; test fixture
(begin-tx)
(use swap.exchange)
(env-sigs [{ 'key: "bob"
  , 'caps:
    [(coin.TRANSFER "Bob" (at 'account (get-pair test.abc coin)) 100.0)
     (test.abc.TRANSFER "Bob" (at 'account (get-pair test.abc coin)) 200.0)
     (coin.TRANSFER "Bob" (at 'account (get-pair test.xyz coin)) 100.0)
     (test.xyz.TRANSFER "Bob" (at 'account (get-pair test.xyz coin)) 60.0)
    ]}])
(swaptests.setup)
(env-events true)
(expect "token liquidity for bob"
  141.321356237309
  (swap.tokens.get-balance (get-pair-key coin test.abc) "Bob")
)
(expect "minimum liquidity for pair"
  MINIMUM_LIQUIDITY
  (swap.tokens.get-balance
    (get-pair-key coin test.abc)
    "lock")
)
(expect "total supply for pair"
  (+ 141.321356237309 MINIMUM_LIQUIDITY)
  (swap.tokens.total-supply (get-pair-key coin test.abc))
)
(expect "kda debited for bob"
  800.0 (coin.get-balance "Bob"))
(expect "abc debited for bob"
  1800.0 (test.abc.get-balance "Bob"))
(expect "kda credited for pair"
  100.0 (coin.get-balance (at 'account (get-pair coin test.abc))))
(expect "abc credited for pair"
  200.0 (test.abc.get-balance (at 'account (get-pair coin test.abc))))



;; not re-testing events for liquidity adding
(env-events true)
(rollback-tx)


;;
;; swap-exact-in
;;

(begin-tx)
(use swap.exchange)
(env-sigs [{ 'key: "bob"
  , 'caps:
    [(coin.TRANSFER "Bob" (at 'account (get-pair test.abc coin)) 100.0)
     (test.abc.TRANSFER "Bob" (at 'account (get-pair test.abc coin)) 200.0)
     (coin.TRANSFER "Bob" (at 'account (get-pair test.xyz coin)) 100.0)
     (test.xyz.TRANSFER "Bob" (at 'account (get-pair test.xyz coin)) 60.0)
    ]}])
(swaptests.setup)
(env-events true)

(env-sigs [
  { 'key: "alice"
  , 'caps:
    [(coin.TRANSFER "Alice" (at 'account (get-pair test.abc coin)) 100.0)]
  }])

(expect "swap exact in"
  [ { "token": "coin", "amount": 10.0 }
    { "token": "test.abc", "amount": 18.13221787760298 }
  ]
  (swap-exact-in 10.0 18.0 [coin test.abc]
    "Alice" "Alice" (read-keyset 'alice) (at 'block-time (chain-data))))

(expect "kda debited for alice"
  9990.0 (coin.get-balance "Alice"))
(expect "abc credited for alice"
  20018.13221787760298 (test.abc.get-balance "Alice"))
(expect "kda credited for pair"
  110.0 (coin.get-balance (at 'account (get-pair coin test.abc))))
(expect "abc debited for pair"
  181.86778212239702
  (test.abc.get-balance (at 'account (get-pair coin test.abc))))

(expect "swap-exact-in events"
  [ { "module-hash": (at 'hash (describe-module "coin"))
    , "name": "coin.TRANSFER"
    , "params": ["Alice" (at 'account (get-pair test.abc coin)) 10.0]
    }
    { "module-hash": (at 'hash (describe-module "test.abc"))
    , "name": "test.abc.TRANSFER"
    , "params": [ (at 'account (get-pair test.abc coin))
                  "Alice" 18.13221787760298]
    }
    { "module-hash": (at 'hash (describe-module "swap.exchange"))
    , "name": "swap.exchange.SWAP"
    , "params": [ (at 'account (get-pair test.abc coin))
                  "Alice" 10.0 coin 18.13221787760298 test.abc]
    }
    { "module-hash": (at 'hash (describe-module "swap.exchange"))
    , "name": "swap.exchange.UPDATE"
    , "params": [ (get-pair-key coin test.abc)
                  110.0 181.86778212239702]
    }
  ]
  (env-events true))
(rollback-tx)

;; 3-way swap

(begin-tx)
(use swap.exchange)
(env-sigs [{ 'key: "bob"
  , 'caps:
    [(coin.TRANSFER "Bob" (at 'account (get-pair test.abc coin)) 100.0)
     (test.abc.TRANSFER "Bob" (at 'account (get-pair test.abc coin)) 200.0)
     (coin.TRANSFER "Bob" (at 'account (get-pair test.xyz coin)) 100.0)
     (test.xyz.TRANSFER "Bob" (at 'account (get-pair test.xyz coin)) 60.0)
    ]}])
(swaptests.setup)
(env-events true)


(env-sigs [
  { 'key: "alice"
  , 'caps:
    [(test.abc.TRANSFER "Alice" (at 'account (get-pair test.abc coin)) 30.0)
    ]
  }])

(expect "swap exact in 3-way"
  [ { "token": "test.abc", "amount": 30.0}
    { "token": "coin", "amount": 13.009438475925}
    { "token": "test.xyz", "amount": 6.88874731466592}
  ]
  (swap-exact-in 30.0 1.0 [test.abc coin test.xyz]
    "Alice" "Alice" (read-keyset 'alice) (at 'block-time (chain-data))))

(expect "abc debited for alice"
  19970.0 (test.abc.get-balance "Alice"))
(expect "abc credited for coin:abc"
  230.0
  (test.abc.get-balance (at 'account (get-pair coin test.abc))))
(expect "kda debited for coin:abc"
  86.990561524075
  (coin.get-balance (at 'account (get-pair coin test.abc))))
(expect "kda credited for coin:xyz"
  113.009438475925
  (coin.get-balance (at 'account (get-pair coin test.xyz))))
(expect "xyz debited for coin:xyz"
  53.11125268533408
  (test.xyz.get-balance (at 'account (get-pair coin test.xyz))))
(expect "xyz credited for alice"
  6.88874731466592 (test.xyz.get-balance "Alice"))

(expect "swap-exact-in 3-way events"
  [ { "module-hash": (at 'hash (describe-module "test.abc"))
    , "name": "test.abc.TRANSFER"
    , "params": ["Alice" (at 'account (get-pair test.abc coin)) 30.0]
    }
    { "module-hash": (at 'hash (describe-module "coin"))
    , "name": "coin.TRANSFER"
    , "params": [ (at 'account (get-pair test.abc coin))
                  (at 'account (get-pair test.xyz coin)) 13.009438475925]
    }
    { "module-hash": (at 'hash (describe-module "swap.exchange"))
    , "name": "swap.exchange.SWAP"
    , "params": [ (at 'account (get-pair test.abc coin))
                  (at 'account (get-pair test.xyz coin))
                  30.0 test.abc 13.009438475925 coin]
    }
    { "module-hash": (at 'hash (describe-module "swap.exchange"))
    , "name": "swap.exchange.UPDATE"
    , "params": [ (get-pair-key coin test.abc)
                  86.990561524075 230.0]
    }
    { "module-hash": (at 'hash (describe-module "test.xyz"))
    , "name": "test.xyz.TRANSFER"
    , "params": [ (at 'account (get-pair test.xyz coin))
                  "Alice" 6.88874731466592]
    }
    { "module-hash": (at 'hash (describe-module "swap.exchange"))
    , "name": "swap.exchange.SWAP"
    , "params": [ (at 'account (get-pair test.xyz coin)) "Alice"
                  13.009438475925 coin 6.88874731466592 test.xyz]
    }
    { "module-hash": (at 'hash (describe-module "swap.exchange"))
    , "name": "swap.exchange.UPDATE"
    , "params": [ (get-pair-key coin test.xyz)
                  113.009438475925 53.11125268533408]
    }
  ]
  (env-events true))

(rollback-tx)

;;
;; swap-exact-out
;;

(begin-tx)
(use swap.exchange)
(env-sigs [{ 'key: "bob"
  , 'caps:
    [(coin.TRANSFER "Bob" (at 'account (get-pair test.abc coin)) 100.0)
     (test.abc.TRANSFER "Bob" (at 'account (get-pair test.abc coin)) 200.0)
     (coin.TRANSFER "Bob" (at 'account (get-pair test.xyz coin)) 100.0)
     (test.xyz.TRANSFER "Bob" (at 'account (get-pair test.xyz coin)) 60.0)
    ]}])
(swaptests.setup)
(env-events true)

(env-sigs [
  { 'key: "alice"
  , 'caps:
    [(coin.TRANSFER "Alice" (at 'account (get-pair test.abc coin)) 5.278994879374)
    ]
  }])

(expect "swap exact out"
  [ { "token": "coin", "amount": 5.278994879374 }
    { "token": "test.abc", "amount": 10.0 }
  ]
  (swap-exact-out 10.0 6.0 [coin test.abc]
    "Alice" "Alice" (read-keyset 'alice) (at 'block-time (chain-data))))

(expect "kda debited for alice"
  9994.721005120626 (coin.get-balance "Alice"))
(expect "abc credited for alice"
  20010.0 (test.abc.get-balance "Alice"))
(expect "kda credited for pair"
  105.278994879374 (coin.get-balance (at 'account (get-pair coin test.abc))))
(expect "abc debited for pair"
  190.0
  (test.abc.get-balance (at 'account (get-pair coin test.abc))))

(rollback-tx)

;; 3-way out

(begin-tx)
(use swap.exchange)
(env-sigs [{ 'key: "bob"
  , 'caps:
    [(coin.TRANSFER "Bob" (at 'account (get-pair test.abc coin)) 100.0)
     (test.abc.TRANSFER "Bob" (at 'account (get-pair test.abc coin)) 200.0)
     (coin.TRANSFER "Bob" (at 'account (get-pair test.xyz coin)) 100.0)
     (test.xyz.TRANSFER "Bob" (at 'account (get-pair test.xyz coin)) 60.0)
    ]}])
(swaptests.setup)
(env-events true)

(env-sigs [
  { 'key: "alice"
  , 'caps:
    [(test.abc.TRANSFER "Alice" (at 'account (get-pair test.abc coin))
      28.78004347733101)]}])

(expect "swap exact out 3-way"
  [ { "token": "test.abc", "amount": 20.12659831606604 }
    { "token": "coin", "amount": 9.118263882556 }
    { "token": "test.xyz", "amount": 5.0 }
  ]
  (swap.exchange.swap-exact-out 5.0 100.0 [test.abc coin test.xyz]
    "Alice" "Alice" (read-keyset 'alice) (at 'block-time (chain-data))))


(expect "abc debited for alice"
  19979.87340168393396 (test.abc.get-balance "Alice"))
(expect "abc credited for coin:abc"
  220.12659831606604
  (test.abc.get-balance (at 'account (get-pair coin test.abc))))
(expect "kda debited for coin:abc"
  90.881736117444
  (coin.get-balance (at 'account (get-pair coin test.abc))))
(expect "kda credited for coin:xyz"
  109.118263882556
  (coin.get-balance (at 'account (get-pair coin test.xyz))))
(expect "xyz debited for coin:xyz"
  55.0
  (test.xyz.get-balance (at 'account (get-pair coin test.xyz))))
(expect "xyz credited for alice"
  5.0 (test.xyz.get-balance "Alice"))

(rollback-tx)

;;
;; optimistic transfer
;;

(begin-tx)
(use swap.exchange)
(env-sigs [{ 'key: "bob"
  , 'caps:
    [(coin.TRANSFER "Bob" (at 'account (get-pair test.abc coin)) 100.0)
     (test.abc.TRANSFER "Bob" (at 'account (get-pair test.abc coin)) 200.0)
     (coin.TRANSFER "Bob" (at 'account (get-pair test.xyz coin)) 100.0)
     (test.xyz.TRANSFER "Bob" (at 'account (get-pair test.xyz coin)) 60.0)
    ]}])
(swaptests.setup)
(env-events true)

(module optimistic-transfer G
  (defcap G () true)
  (implements swap.swap-callable-v1)
  (defun swap-call:bool
    ( token-in:module{fungible-v2}
      token-out:module{fungible-v2}
      amount-in:decimal
      amount-out:decimal
      sender:string
      recipient:string
      recipient-guard:guard
    )
    (test.abc.transfer recipient sender 0.000000001)
    true
  )
)

(env-sigs [
  { 'key: "alice"
  , 'caps:
    [(test.abc.TRANSFER "Alice" (at 'account (get-pair test.abc coin))
      100.0)]}])

(swap-leg
  optimistic-transfer
  "Alice"
  (read-keyset 'alice)
  { 'token-out: coin
  , 'token-in: test.abc
  , 'in: 0.0
  , 'out: 10.0
  , 'idx: 0
  , 'pair: (get-pair coin test.abc)
  , 'path: []
  })

(env-events true)
