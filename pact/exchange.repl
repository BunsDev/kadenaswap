
(begin-tx)
(load "root/fungible-v2.pact")
(load "root/coin.pact")

(env-data
  { 'swap-ns-user: []
  , 'swap-ns-admin: []
  })
(load "ns.pact")
(load "tokens.pact")
(load "exchange.pact")


(define-namespace 'test (sig-keyset) (sig-keyset))
(load "test/ABC.pact")
(load "test/XYZ.pact")
(commit-tx)

(begin-tx)

;; test pair canonicity
(use swap.exchange)
(expect "canonical pair keys match"
  (get-pair-key test.abc coin)
  (get-pair-key coin test.abc))
(expect "pair does not exist yet" false
  (pair-exists test.abc coin))

(create-pair coin test.abc "")
(create-pair coin test.xyz "")

(env-data
  { 'bob: ["bob"]
  , 'alice: ["alice"]
  })

(test-capability (coin.COINBASE))
(coin.coinbase "Bob" (read-keyset 'bob) 1000.0)
(test.abc.create-account "Bob" (read-keyset 'bob))
(test.abc.fund "Bob" 2000.0)
(test.xyz.create-account "Bob" (read-keyset 'bob))
(test.xyz.fund "Bob" 600.0)
(coin.coinbase "Alice" (read-keyset 'alice) 10000.0)
(test.abc.create-account "Alice" (read-keyset 'alice))
(test.abc.fund "Alice" 20000.0)

;;
;; add-liquidity
;;

(env-sigs [
  { 'key: "bob"
  , 'caps:
    [(coin.TRANSFER "Bob" (at 'account (get-pair test.abc coin)) 100.0)
     (test.abc.TRANSFER "Bob" (at 'account (get-pair test.abc coin)) 200.0)
    ]
  }])
(add-liquidity coin test.abc
  100.0
  200.0
  50.0
  100.0
  "Bob"
  (read-keyset 'bob)
  (at 'block-time (chain-data)))

(expect "token liquidity for bob"
  141.321356237309
  (swap.tokens.get-balance (get-pair-key coin test.abc) "Bob")
)
(expect "minimum liquidity for pair"
  MINIMUM_LIQUIDITY
  (swap.tokens.get-balance
    (get-pair-key coin test.abc)
    (at 'account (get-pair coin test.abc)))
)
(expect "total supply for pair"
  (+ 141.321356237309 MINIMUM_LIQUIDITY)
  (swap.tokens.total-supply (get-pair-key coin test.abc))
)
(expect "kda debited for bob"
  900.0 (coin.get-balance "Bob"))
(expect "abc debited for bob"
  1800.0 (test.abc.get-balance "Bob"))
(expect "kda credited for pair"
  100.0 (coin.get-balance (at 'account (get-pair coin test.abc))))
(expect "abc credited for pair"
  200.0 (test.abc.get-balance (at 'account (get-pair coin test.abc))))

;;
;; remove-liquidity
;;

;; flip tokens to test canonicity
(env-sigs [
  { 'key: "bob"
  , 'caps:
    [(swap.tokens.TRANSFER
      (get-pair-key coin test.abc)
      "Bob"
      (at 'account (get-pair coin test.abc))
      141.321356237309)
    ]}])
;;TODO fix bug, installing here for now
(install-capability (test.abc.TRANSFER (at 'account (get-pair coin test.abc)) "Bob" 200.0))
(install-capability (coin.TRANSFER (at 'account (get-pair coin test.abc)) "Bob" 100.0))
(remove-liquidity test.abc coin
  141.321356237309
  200.0
  100.0
  "Bob"
  (at 'block-time (chain-data)))

(expect "token liquidity for bob"
  0.0
  (swap.tokens.get-balance (get-pair-key coin test.abc) "Bob")
)
(expect "minimum liquidity for pair"
  MINIMUM_LIQUIDITY
  (swap.tokens.get-balance
    (get-pair-key coin test.abc)
    (at 'account (get-pair coin test.abc)))
)
(expect "total supply for pair"
  MINIMUM_LIQUIDITY
  (swap.tokens.total-supply (get-pair-key coin test.abc))
)
(expect "kda credited for bob"
  1000.0 (coin.get-balance "Bob"))
(expect "abc credited for bob"
  2000.0 (test.abc.get-balance "Bob"))
(expect "kda debited for pair"
  0.0 (coin.get-balance (at 'account (get-pair coin test.abc))))
(expect "abc debited for pair"
  0.0 (test.abc.get-balance (at 'account (get-pair coin test.abc))))

(commit-tx)

;;
;; swaps
;;

;; add back liquidity for swap
(begin-tx)
(use swap.exchange)
(env-sigs [
  { 'key: "bob"
  , 'caps:
    [(coin.TRANSFER "Bob" (at 'account (get-pair test.abc coin)) 100.0)
     (test.abc.TRANSFER "Bob" (at 'account (get-pair test.abc coin)) 200.0)
     (coin.TRANSFER "Bob" (at 'account (get-pair test.xyz coin)) 100.0)
     (test.xyz.TRANSFER "Bob" (at 'account (get-pair test.xyz coin)) 60.0)
    ]
  }])
(add-liquidity coin test.abc
  100.0
  200.0
  50.0
  100.0
  "Bob"
  (read-keyset 'bob)
  (at 'block-time (chain-data)))

(expect "token liquidity for bob"
  141.421356237309
  (swap.tokens.get-balance (get-pair-key coin test.abc) "Bob")
)
(expect "minimum liquidity for pair"
  MINIMUM_LIQUIDITY
  (swap.tokens.get-balance
    (get-pair-key coin test.abc)
    (at 'account (get-pair coin test.abc)))
)
(expect "total supply for pair"
  (+ 141.421356237309 MINIMUM_LIQUIDITY)
  (swap.tokens.total-supply (get-pair-key coin test.abc))
)
(expect "kda debited for bob"
  900.0 (coin.get-balance "Bob"))
(expect "abc debited for bob"
  1800.0 (test.abc.get-balance "Bob"))
(expect "kda credited for pair"
  100.0 (coin.get-balance (at 'account (get-pair coin test.abc))))
(expect "abc credited for pair"
  200.0 (test.abc.get-balance (at 'account (get-pair coin test.abc))))

(add-liquidity coin test.xyz
  100.0
  60.0
  50.0
  30.0
  "Bob"
  (read-keyset 'bob)
  (at 'block-time (chain-data)))


;;
;; swap-exact-in
;;

(env-sigs [
  { 'key: "alice"
  , 'caps:
    [(coin.TRANSFER "Alice" (at 'account (get-pair test.abc coin)) 100.0)]
  }])

;; TODO modref Capabilities
(install-capability
  (test.abc.TRANSFER (at 'account (get-pair coin test.abc))
  "Alice" 18.13221787760298))

;; swap!
(expect "swap exact in" ["Write succeeded"]
  (swap-exact-in 10.0 18.0 [coin test.abc]
    "Alice" (read-keyset 'alice) (at 'block-time (chain-data))))

(expect "kda debited for alice"
  9990.0 (coin.get-balance "Alice"))
(expect "abc credited for alice"
  20018.13221787760298 (test.abc.get-balance "Alice"))
(expect "kda credited for pair"
  110.0 (coin.get-balance (at 'account (get-pair coin test.abc))))
(expect "abc debited for pair"
  181.86778212239702
  (test.abc.get-balance (at 'account (get-pair coin test.abc))))

;; 3-way swap

(env-sigs [
  { 'key: "alice"
  , 'caps:
    [(test.abc.TRANSFER "Alice" (at 'account (get-pair test.abc coin)) 30.0)
    ]
  }])
;; TODO modref Capabilities
(install-capability
  (coin.TRANSFER
    (at 'account (get-pair coin test.abc))
    (at 'account (get-pair coin test.xyz))
    15.535624025463))
(install-capability
  (test.xyz.TRANSFER
    (at 'account (get-pair coin test.xyz))
    "Alice"
    8.04700786369056))
(expect "swap exact in 3-way" ["Write succeeded","Write succeeded"]
  (swap-exact-in 30.0 1.0 [test.abc coin test.xyz]
    "Alice" (read-keyset 'alice) (at 'block-time (chain-data))))

(expect "abc debited for alice"
  19988.13221787760298 (test.abc.get-balance "Alice"))
(expect "abc credited for coin:abc"
  211.86778212239702
  (test.abc.get-balance (at 'account (get-pair coin test.abc))))
(expect "kda debited for coin:abc"
  94.464375974537
  (coin.get-balance (at 'account (get-pair coin test.abc))))
(expect "kda credited for coin:xyz"
  115.535624025463
  (coin.get-balance (at 'account (get-pair coin test.xyz))))
(expect "xyz debited for coin:xyz"
  51.95299213630944
  (test.xyz.get-balance (at 'account (get-pair coin test.xyz))))
(expect "xyz credited for alice"
  8.04700786369056 (test.xyz.get-balance "Alice"))

(commit-tx)

;;
;; swap-exact-out
;;

(begin-tx)
(use swap.exchange)

(env-sigs [
  { 'key: "alice"
  , 'caps:
    [(coin.TRANSFER "Alice" (at 'account (get-pair test.abc coin)) 4.693597999833)
    ]
  }])
;; todo fix defcaps
(install-capability (test.abc.TRANSFER (at 'account (get-pair test.abc coin))
  "Alice" 10.0))

(expect "swap exact out" ["Write succeeded"]
  (swap-exact-out 10.0 5.0 [coin test.abc]
    "Alice" (read-keyset 'alice) (at 'block-time (chain-data))))

(expect "kda debited for alice"
  9985.306402000167 (coin.get-balance "Alice"))
(expect "abc credited for alice"
  19998.13221787760298 (test.abc.get-balance "Alice"))
(expect "kda credited for pair"
  99.157973974370 (coin.get-balance (at 'account (get-pair coin test.abc))))
(expect "abc debited for pair"
  201.86778212239702
  (test.abc.get-balance (at 'account (get-pair coin test.abc))))

(env-sigs [
  { 'key: "alice"
  , 'caps:
    [(test.abc.TRANSFER "Alice" (at 'account (get-pair test.abc coin)) 28.78004347733101)
    ]
  }])

;; todo fix defcaps
(install-capability
  (coin.TRANSFER
    (at 'account (get-pair test.abc coin))
    (at 'account (get-pair test.xyz coin))
    12.340350271030))
(install-capability (test.xyz.TRANSFER (at 'account (get-pair test.xyz coin))
  "Alice" 5.0))

(expect "swap exact in 3-way" ["Write succeeded","Write succeeded"]
  (swap-exact-out 5.0 100.0 [test.abc coin test.xyz]
    "Alice" (read-keyset 'alice) (at 'block-time (chain-data))))


(expect "abc debited for alice"
  19969.35217440027197 (test.abc.get-balance "Alice"))
(expect "abc credited for coin:abc"
  230.64782559972803
  (test.abc.get-balance (at 'account (get-pair coin test.abc))))
(expect "kda debited for coin:abc"
  86.817623703340
  (coin.get-balance (at 'account (get-pair coin test.abc))))
(expect "kda credited for coin:xyz"
  127.875974296493
  (coin.get-balance (at 'account (get-pair coin test.xyz))))
(expect "xyz debited for coin:xyz"
  46.95299213630944
  (test.xyz.get-balance (at 'account (get-pair coin test.xyz))))
(expect "xyz credited for alice"
  13.04700786369056 (test.xyz.get-balance "Alice"))
