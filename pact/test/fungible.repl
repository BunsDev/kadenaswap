
(begin-tx)
(load "../root/fungible-v2.pact")
(env-enable-repl-natives true)
(env-data
  { "alice": ["alice-key"]
  , "bob": ["bob-key"]}
  )
(module fungible-v2-test G
  " Test suite for fungibles. "
  (defcap G () true)

  (defconst FUNDER_ACCT "FUNDER_ACCT"
    "Name of test funding account")

  (defconst FUNDER_GUARD:guard (funder-guard)
    "Guard for test funding account")

  (defconst FUNDER_BALANCE 10000.0
    "Initial balance for test funding account")

  (defconst ALICE "alice")
  (defconst ALICE_KEY:string (at 0 (read-msg ALICE)))
  (defconst ALICE_GUARD (read-keyset ALICE))

  (defconst BOB "bob")
  (defconst BOB_KEY (at 0 (read-msg BOB)))
  (defconst BOB_GUARD (read-keyset BOB))

  (defconst CARLA "carla")

  (defun funder-guard ()
    (create-module-guard "FUNDER_ACCT"))

  (defun fund-create
    ( f:module{fungible-v2}
      account:string
      guard:guard
      amount:decimal )
    "Fixture: create and fund ACCOUNT with GUARD for AMOUNT"
    (install-capability (f::TRANSFER FUNDER_ACCT account amount))
    (f::transfer-create FUNDER_ACCT account guard amount)
  )

  (defun fund
    ( f:module{fungible-v2}
      account:string
      amount:decimal )
    "Fixture: Fund existing ACCOUNT for AMOUNT"
    (install-capability (f::TRANSFER FUNDER_ACCT account amount))
    (f::transfer FUNDER_ACCT account amount)
  )

  (defun pow (v:decimal e:integer)
    "Support negative exponents"
    (if (>= e 0) (^ v e)
      (fold (/) 1.0 (make-list (- e) v))))


  (defun precision-min-value (f:module{fungible-v2})
    "Compute minimum value for F fungible."
    (pow 10.0 (- (f::precision))))

  ;;
  ;; TEST SUITE
  ;;

  (defun suite (f:module{fungible-v2})
    " Run suite on fungible module F. Requires special account \
    \ 'FUNDER_ACCT' to exist with 'FUNDER_GUARD' guard and \
    \ 'FUNDER_BALANCE' balance."
    (fixture-tests f)
    (create-account-tests f)
    (transfer-tests f)
    (transfer-create-tests f)
    (transfer-crosschain-tests f)
    (rotate-tests f)
    (enforce-unit-tests f)
  )

  (defun fixture-tests (f:module{fungible-v2})
    (expect "Funder account funded" 10000.0
      (f::get-balance FUNDER_ACCT))
    (expect "pow 10 -1" 0.1 (pow 10.0 -1))
    (expect "pow 10 -2" 0.01 (pow 10.0 -2))
    (expect "pow 4 -3" 0.015625 (pow 4.0 -3))
    (expect "pow 9 3" 729.0 (pow 9.0 3))
  )

  (defun create-account-tests (f:module{fungible-v2})
    " Covers:                                  \
    \ 1) inherent create-account invariants.   "

    (begin-tx "create-account-tests")

    (expect-failure
      "Uncreated account does not exist"
      (f::details BOB))

    (expect-failure
      "Account creation with empty ID fails [implied by transfer properties]"
      (f::create-account "" BOB_GUARD))

    (expect-that "Account creation succeeds"
      (constantly true) ;; avoid requiring specific response
      (f::create-account BOB BOB_GUARD))

    (expect
      "Account successfully created with correct details"
      { 'account: BOB
      , 'balance: 0.0
      , 'guard: BOB_GUARD
      }
      (f::details BOB))

    (expect
      "Account balance correct"
      0.0
      (f::get-balance BOB))

    (expect-failure
      "Creation of account with existing account ID fails"
      (f::create-account BOB BOB_KEY))

    ;; fund for testing
    (fund f BOB 1.0)
    ;; test ownership
    (env-sigs
      [ {"key": ALICE_KEY
      , "caps": [(f::TRANSFER BOB ALICE 1.0)]}])
    (with-applied-env
      (expect-failure
        "Created account prevents unauthorized transfer"
        (f::transfer-create BOB ALICE ALICE_GUARD 1.0)))

    (env-sigs
      [ {"key": BOB_KEY
      , "caps": [(f::TRANSFER BOB ALICE 1.0)]}])
    (with-applied-env
      (expect-that
        "Created account allows authorized transfer"
        (constantly true)
        (f::transfer-create BOB ALICE ALICE_GUARD 1.0)))

    (rollback-tx)
  )


  (defun transfer-tests (f:module{fungible-v2})
    " Covers:                                        \
    \ 1) properties on 'transfer'                    \
    \ 2) managed capability calculus                 \
    \ 3) precision violations                        \
    \ Exceptions:                                    \
    \ - empty account IDs (covered by create-account \
    \   and transfer-create tests.)                  "

    (begin-tx "transfer-tests 1")

    (expect-that "Bob account creation succeeds"
      (constantly true) ;; avoid requiring specific response
      (f::create-account BOB BOB_GUARD))

    (expect-that "Alice account creation succeeds"
      (constantly true) ;; avoid requiring specific response
      (f::create-account ALICE ALICE_GUARD))

    (fund f BOB 1.0)

    (expect-failure
      "Cannot transfer Bob-Alice without managed capability"
      "capability not installed" ;; text from Pact, not module
      (f::transfer BOB ALICE 1.0))

    (fund f ALICE 2.0)

    (expect-failure
      "Cannot transfer Alice-Bob without managed capability"
      "capability not installed" ;; text from Pact, not module
      (f::transfer ALICE BOB 2.0))

    (env-sigs
      [ { "key": BOB_KEY
        , "caps": [(f::TRANSFER BOB ALICE 1.0)]}
        { "key": ALICE_KEY
        , "caps": [(f::TRANSFER ALICE BOB 2.0)]}
      ])
    (with-applied-env [

      (expect-failure
        "Transfer fails with negative amount"
        (f::transfer BOB ALICE -0.1)
      )

      (expect-failure
        "Transfer fails with 0.0 amount"
        (f::transfer BOB ALICE 0.0)
      )

      (expect-failure
        "Transfer fails with min precision / 10 value"
        (f::transfer BOB ALICE
          (/ (precision-min-value f) 10.0)))

      (expect-failure
        "Transfer fails with amount greater than cap"
        (f::transfer BOB ALICE 10.0)
      )

      (expect-that
        "Transfer Bob-Alice succeeds with exact cap"
        (constantly true)
        (f::transfer BOB ALICE 1.0))

      (expect
        "Transfer Bob-Alice: Bob balance correct"
        0.0
        (f::get-balance BOB))

      (expect
        "Transfer Bob-Alice: Alice balance correct"
        3.0
        (f::get-balance ALICE))

      (expect-that
        "Transfer Alice-Bob-1 succeeds with 1/2 cap"
        (constantly true)
        (f::transfer ALICE BOB 1.0))

      (expect-failure
        "Transfer Alice-Bob-2 fails for full cap"
        (f::transfer ALICE BOB 2.0))

      (expect-that
        "Transfer Alice-Bob-2 succeeds with 1/2 cap"
        (constantly true)
        (f::transfer ALICE BOB 1.0))

      (expect
        "Transfer Alice-Bob: Bob balance correct"
        2.0
        (f::get-balance BOB))

      (expect
        "Transfer Alice-Bob: Alice balance correct"
        1.0
        (f::get-balance ALICE))

    ])

    (rollback-tx)

    (begin-tx "transfer-tests-2")

    (fund-create f BOB BOB_GUARD 1.0)
    (fund-create f ALICE ALICE_GUARD 1.0)
    (env-sigs
      [ { "key": ALICE_KEY
        , "caps": [(f::TRANSFER BOB ALICE 1.0)]}
      ])
    (with-applied-env [
      (expect-failure
        "Transfer fails without Bob signing"
        (f::transfer BOB ALICE 1.0))
    ])

    (rollback-tx)


    (begin-tx "transfer-tests-3")

    (fund-create f BOB BOB_GUARD 1.0)
    (fund-create f ALICE ALICE_GUARD 1.0)

    (env-sigs
      [ { "key": BOB_KEY
        , "caps": [(f::TRANSFER BOB ALICE 5.0)]}
      ])
    (with-applied-env [
      (expect-failure
        "Transfer fails for insufficient funds"
        (f::transfer BOB ALICE 5.0))

      (expect-that
        "Transfer succeeds for min precision value"
        (constantly true)
        (f::transfer BOB ALICE (precision-min-value f)))

      (expect
        "Transfer min precision: Bob balance correct"
        (- 1.0 (precision-min-value f))
        (f::get-balance BOB))

      (expect
        "Transfer min precision: Alice balance correct"
        (+ 1.0 (precision-min-value f))
        (f::get-balance ALICE))
    ])

    (env-sigs
      [ { "key": BOB_KEY
        , "caps": [(f::TRANSFER BOB BOB 1.0)]}
      ])
    (with-applied-env [
      (expect-failure
        "Transfer fails for same account"
        (f::transfer BOB BOB 1.0))
    ])

    (rollback-tx)
  )



  (defun transfer-create-tests (f:module{fungible-v2})
    " Covers:                                        \
    \ 1) properties on 'transfer-create'             \
    \ 2) managed capability calculus                 \
    \ 3) precision violations                        \
    \ Exceptions:                                    \
    \ - empty sender ID (covered by create-account tests) "

    (begin-tx "transfer-create-tests 1")

    (fund-create f ALICE ALICE_GUARD 1.0)

    (env-sigs
      [ { "key": ALICE_KEY
        , "caps": [(f::TRANSFER ALICE "" 1.0)]}
      ])
    (with-applied-env [
      (expect-failure
        "Transfer-create fails for empty receiver account"
        (f::transfer-create ALICE "" ALICE_GUARD 1.0))
      ])


    (expect-failure
      "Cannot transfer-create Alice-Bob without managed capability"
      "capability not installed" ;; text from Pact, not module
      (f::transfer-create ALICE BOB BOB_GUARD 1.0))

    (env-sigs
      [ { "key": ALICE_KEY
        , "caps": [(f::TRANSFER ALICE BOB 1.0)]}
      ])
    (with-applied-env [

      (expect-failure
        "Transfer-create fails with negative amount"
        (f::transfer-create ALICE BOB BOB_GUARD -0.1)
      )

      (expect-failure
        "Transfer-create fails with 0.0 amount"
        (f::transfer-create ALICE BOB BOB_GUARD 0.0)
      )

      (expect-failure
        "Transfer-create fails with min precision / 10 value"
        (f::transfer-create ALICE BOB BOB_GUARD
          (/ (precision-min-value f) 10.0)))

      (expect-failure
        "Transfer-create fails with amount greater than cap"
        (f::transfer-create ALICE BOB BOB_GUARD 10.0)
      )

      (expect-that
        "Transfer-create succeeds Alice-Bob"
        (constantly true)
        (f::transfer-create ALICE BOB BOB_GUARD 1.0))

      (expect
        "Transfer Alice-Bob: Bob balance correct"
        1.0
        (f::get-balance BOB))

      (expect
        "Transfer Alice-Bob: Alice balance correct"
        0.0
        (f::get-balance ALICE))

    ])

    (env-sigs
      [ { "key": BOB_KEY
        , "caps": [(f::TRANSFER BOB ALICE 0.1)]}
      ])
    (with-applied-env [

      (expect-that
        "Transfer-create Bob-Alice-1 succeeds with 1/4 cap"
        (constantly true)
        (f::transfer-create BOB ALICE ALICE_GUARD 0.025))

      (expect-failure
        "Transfer-create Bob-Alice-2 fails for full cap"
        (f::transfer-create BOB ALICE ALICE_GUARD 0.1))

      (expect-that
        "Transfer-create Bob-Alice-2 succeeds with 1/2 cap"
        (constantly true)
        (f::transfer-create BOB ALICE ALICE_GUARD 0.05))

      (expect
        "Transfer-create Bob-Alice: Bob balance correct"
        0.925
        (f::get-balance BOB))

      (expect
        "Transfer-create Bob-Alice: Alice balance correct"
        0.075
        (f::get-balance ALICE))

      (expect-failure
        "Transfer-create fails with mismatched guard"
        (f::transfer-create BOB ALICE BOB_GUARD 0.025)
      )

    ])

    (rollback-tx)

    (begin-tx "transfer-create-tests-2")

    (fund-create f BOB BOB_GUARD 1.0)
    (env-sigs
      [ { "key": ALICE_KEY
        , "caps": [(f::TRANSFER BOB ALICE 1.0)]}
      ])
    (with-applied-env [
      (expect-failure
        "Transfer-create fails without Bob signing"
        (f::transfer-create BOB ALICE ALICE_GUARD 1.0))
    ])

    (rollback-tx)

    (begin-tx "transfer-create-tests-3")

    (fund-create f BOB BOB_GUARD 1.0)

    (env-sigs
      [ { "key": BOB_KEY
        , "caps": [(f::TRANSFER BOB ALICE 5.0)]}
      ])
    (with-applied-env [
      (expect-failure
        "Transfer-create fails for insufficient funds"
        (f::transfer-create BOB ALICE ALICE_GUARD 5.0))

      (expect-that
        "Transfer-create succeeds for min precision value"
        (constantly true)
        (f::transfer-create BOB ALICE ALICE_GUARD (precision-min-value f)))

      (expect
        "Transfer-create min precision: Bob balance correct"
        (- 1.0 (precision-min-value f))
        (f::get-balance BOB))

      (expect
        "Transfer-create min precision: Alice balance correct"
        (precision-min-value f)
        (f::get-balance ALICE))
    ])

    (env-sigs
      [ { "key": BOB_KEY
        , "caps": [(f::TRANSFER BOB BOB 1.0)]}
      ])
    (with-applied-env [
      (expect-failure
        "Transfer-create fails for same account"
        (f::transfer-create BOB BOB BOB_GUARD 1.0))
    ])

    (rollback-tx)

  )

  (defun transfer-crosschain-tests (f:module{fungible-v2})
    (begin-tx "transfer-crosschain-tests")

    (rollback-tx)
  )

  (defun rotate-tests (f:module{fungible-v2})
    (begin-tx "rotate-tests")

    (rollback-tx)
  )


  (defun enforce-unit-tests (f:module{fungible-v2})
    (begin-tx "enforce-unit-tests")

    (expect-that "1.0 succeeds"
      (f::enforce-unit) 1.0)
    (expect-that "min precision succeeds"
      (f::enforce-unit) (precision-min-value f))
    (expect-failure "min prec / 10 fails"
      (f::enforce-unit (/ (precision-min-value f) 10.0)))

    (rollback-tx)
  )
)
(commit-tx)

(begin-tx)
(load "../root/coin.pact")
(test-capability (coin.COINBASE))
(use fungible-v2-test)
(coin.coinbase FUNDER_ACCT FUNDER_GUARD 10000.0)
(commit-tx)

(fungible-v2-test.suite coin)
